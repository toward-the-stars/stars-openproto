# Beta 是需求測試階段，當releases/* 內測完成，對main發起pull request，或更新pull request 程式時，進行打包並部署。部署完成由需求方測試，或開放至uat環境供外部測試。
name: Beta  # 工作流程的名稱

on:  # 觸發條件
  workflow_call:   # 當有 pull_request 事件時觸發
    outputs:
      version:
        description: "產生的版本號，沒有v"
        value: ${{ jobs.version.outputs.version }}
      prod-version:
        description: "生產環境目標版本號，拿掉-之後"
        value: ${{ jobs.version.outputs.prod-version }}

env:
  VERSION:
  PROD_VERSION:
  LATEST_TAG:
  BETA_TAG:

jobs:

  check-from-releases:
    if:  startsWith(github.ref_name, 'releases/') == false
    runs-on: ubuntu-latest  # 在 Ubuntu 最新版本上執行
    steps:
    - name: 並非來自於releases/**分支，終止Action
      run: |
        echo ${{ github.ref_name }}
        throw "並非來自於releases/**分支，終止Action"

  version:  # 工作名稱
    if:  startsWith(github.ref_name, 'releases/')
    runs-on: ubuntu-latest  # 在 Ubuntu 最新版本上執行
    permissions:
      contents: write  # This is required for actions/checkout
    outputs:
      version: ${{ env.VERSION }}
      prod-version: ${{ env.PROD_VERSION }}
    steps:  # 步驟
      - name: 01.Checkout Repository 檢查程式庫 # 檢查程式庫
        uses: actions/checkout@v4  # 使用 GitHub 官方的 checkout 行動

      - name: 02.Get Release Version 取得發佈版本號碼  # 取得發佈版本號碼
        id: get_release_version  # 設定步驟的 ID，以便在其他步驟中引用
        run: |
          version=$(echo "${{ github.ref_name }}" | sed -n 's/.*releases\/\([0-9]\+\.[0-9]\+\.[0-9]\+\).*/\1/p')  # 從分支名稱中提取版本號碼
          echo "發佈版本號碼為 $version"  # 印出發佈版本號碼
          echo "PROD_VERSION=$version" >> $GITHUB_ENV                                                    # 將發佈版本號碼儲存到環境文件中，以供其他步驟使用

      - name: 03.Get Latest Tag 取得最新標籤  # 取得最新標籤
        id: get_latest_tag  # 步驟 ID：get_latest_tag
        run: |
          git fetch --tags --prune --depth=1  # 取得遠端標籤並清理歷史
          latest_tag=$(git tag --list --sort=v:refname | grep v$PROD_VERSION | grep beta | tail -n1)  # 取得最新的標籤
          if [[ $latest_tag =~ ^v([0-9]+\.[0-9]+\.[0-9]+(-[A-Za-z]+\.[0-9]+)?) ]]; then  # 使用正則表達式匹配標籤格式
            latest_tag=${BASH_REMATCH[1]}  # 提取匹配的標籤部分
          else
            latest_tag="0.0.0"  # 如果無法匹配，設置為預設的初始標籤 "0.0.0"
          fi
          echo "最新標籤為 $latest_tag"  # 印出最新的標籤
          echo "LATEST_TAG=$latest_tag" >> $GITHUB_ENV  # 將最新標籤儲存到環境變數中，以供其他步驟使用

      - name: 04.Generate Beta Tag 生成 beta 標籤  # 生成 beta 標籤
        id: generate_tag  # 設定步驟的 ID，以便在其他步驟中引用
        run: |
          latest_tag=${{ env.LATEST_TAG }}  # 從環境變數中取得最新標籤
          beta_version=$(echo $latest_tag | grep -oE '[0-9]+$')   # 從最新標籤中取得版本號，使用正則表達式匹配數字部分
          next_beta_version=$((beta_version + 1))                 # 將版本號加一，生成下一個 beta 版本號
          version="$PROD_VERSION-beta.$next_beta_version"      # 生成 beta 版本號
          beta_tag="v$version"                                    # 將生成的 beta 版本號組合成完整的標籤
          echo "生成的 beta 標籤為：$beta_tag"                      # 印出生成的 beta 標籤
          echo "VERSION=$version" >> $GITHUB_ENV                  # 將生成的 beta 標籤儲存到環境變數中，以供其他步驟使用
          echo "BETA_TAG=$beta_tag" >> $GITHUB_ENV  # 將生成的 beta 標籤儲存到環境變數中，以供其他步驟使用

      - name: 05.Create and Push Tag 創建並推送標籤 # 創建並推送標籤
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          updateOnlyUnreleased: true
          prerelease: true 
          commit: ${{ github.sha }}
          tag: ${{ env.BETA_TAG }}  # 使用生成的 beta 標籤作為標籤名稱
          name: Beta  ${{ env.VERSION }}  # 標籤的發佈名稱
          body: |
            This is an Beta.
